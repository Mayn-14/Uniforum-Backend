openapi: 3.0.3
info:
  title: Django DRF Uniforum
  version: 0.0.0
paths:
  /:
    get:
      operationId: root_retrieve
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /answer-comment-downvote/{id}:
    put:
      operationId: answer_comment_downvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment-downvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /answer-comment-upvote/{id}:
    put:
      operationId: answer_comment_upvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment-upvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /answer-comment/{id}:
    get:
      operationId: answer_comment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: answer_comment_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: answer_comment_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: answer_comment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: answer_comment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-comment
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /answer-downvote/{id}:
    put:
      operationId: answer_downvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-downvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /answer-restore/{id}:
    put:
      operationId: answer_restore_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-restore
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /answer-upvote/{id}:
    put:
      operationId: answer_upvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer-upvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /answer/{id}:
    get:
      operationId: answer_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: answer_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: answer_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: answer_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: answer_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - answer
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /question-comment-downvote/{id}:
    put:
      operationId: question_comment_downvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment-downvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /question-comment-upvote/{id}:
    put:
      operationId: question_comment_upvote_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment-upvote
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /question-comment/{id}:
    get:
      operationId: question_comment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: question_comment_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: question_comment_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: question_comment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: question_comment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question-comment
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /question-restore/{slug}:
    put:
      operationId: question_restore_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question-restore
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /question/{slug}:
    get:
      operationId: question_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: question_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: question_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: question_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: question_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - question
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /questions/:
    get:
      operationId: questions_retrieve
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: questions_create
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: questions_update
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: questions_partial_update
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: questions_destroy
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /token/verify/:
    post:
      operationId: token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
